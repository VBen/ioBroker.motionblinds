{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v1.34.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from \"@iobroker/adapter-core\";\r\nimport { MotionGateway, Report, BlindType, ReadDeviceAck, DeviceType, Operation, VoltageMode, LimitsState, WirelessMode, Heartbeat, WriteDeviceAck, DEVICE_TYPE_GATEWAY } from \"motionblinds\";\r\n\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from \"fs\";\r\ntype DeviceData = {\r\n\tdevtype: DeviceType\r\n}\r\n\r\nclass Motionblinds extends utils.Adapter {\r\n\r\n\tprivate gateway?: MotionGateway;\r\n\tprivate devices: void | ReadDeviceAck[] = [];\r\n\tprivate devicemap = new Map<string, DeviceData>();\r\n\tprivate hbTimeout = 75; // default timing for heartbeat messages: 60s\r\n\tprivate refreshInterval = 43200; // 12hours refresh for getting battery states from devices\r\n\tprivate missedHeartbeats = 0;\r\n\tprivate maxMissedHeartbeats = 4; //maximum middes hearbeats before assuming a lost connection\r\n\tprivate heartbeatTimeout!: ioBroker.Timeout | undefined;\r\n\tprivate queryDevicesInterval!: ioBroker.Interval | undefined;\r\n\r\n\r\n\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: \"motionblinds\",\r\n\t\t});\r\n\r\n\t\tthis.on(\"ready\", this.onReady.bind(this));\r\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\r\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\t\t// Initialize your adapter here\r\n\t\tthis.log.info(\"config token: \" + this.config.token);\r\n\r\n\t\tif(this.config.timeout<3 || !this.config.timeout){\r\n\t\t\tthis.config.timeout = 3\r\n\t\t\tthis.log.error(\"Timeout was lower than 3sec or undefined, value was resetted to 3sec, please correct your adapter configuration\")\r\n\t\t}\r\n\r\n\t\tthis.log.info(\"using timeout:\" + this.config.timeout);\r\n\r\n\t\t// Reset the connection indicator during startup\r\n\t\tthis.setState(\"info.connection\",{val:false, ack:true});\r\n\t\tthis.setObjectNotExists(\"info.missingheartbeat\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"Missed Hearbeats\",\r\n\t\t\t\trole: \"counter\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: false,\r\n\t\t\t\twrite: true,\r\n\t\t\t}, native: {}\r\n\t\t},() => {this.setState(\"info.missingheartbeat\", this.missedHeartbeats, true)});\r\n\t\tthis.gateway = new MotionGateway({ key: this.config.token, timeoutSec: this.config.timeout });\r\n\t\tthis.gateway.start();\r\n\r\n\t\tthis.gateway.on(\"report\", (report) => {\r\n\t\t\tthis.updateFromReport(report);\r\n\t\t})\r\n\t\tthis.gateway.on(\"error\", (err) => {\r\n\t\t\tthis.log.error(\"Error: \" + JSON.stringify(err));\r\n\t\t})\r\n\t\tthis.gateway.on(\"heartbeat\", (heartbeat) => {\r\n\t\t\tthis.processHeartbeat(heartbeat);\r\n\t\t})\r\n\r\n\t\tawait this.gateway?.readAllDevices()\r\n\t\t\t.catch((reason) => {this.log.error(\"Failed fetching list of MOTION Blinds: \" + JSON.stringify(reason))})\r\n\t\t\t.then((deviceData) => {this.processDeviceList(deviceData);});\r\n\r\n\t\tthis.subscribeStates(\"*.position\");\r\n\t\tthis.subscribeStates(\"*.fullup\");\r\n\t\tthis.subscribeStates(\"*.fulldown\");\r\n\t\tthis.subscribeStates(\"*.stop\");\r\n\t\tthis.subscribeStates(\"*.device_query\");\r\n\t\tthis.subscribeStates(\"*.angle\");\r\n\r\n\t\tthis.heartbeatTimeout = this.setTimeout(()=> this.hbTimeoutExpired(),this.hbTimeout*1000);\r\n\t\tthis.queryDevicesInterval = this.setInterval(()=>{\r\n\t\t\tthis.log.debug(\"auto refresh started\")\r\n\t\t\tthis.refreshDevices()\r\n\t\t},this.refreshInterval*1000);\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\tthis.log.info(\"Shutting down adapter\");\r\n\t\ttry {\r\n\t\t\tif (this.gateway) {\r\n\t\t\t\tif (this.gateway.sendSocket) this.gateway.sendSocket.close();\r\n\t\t\t\tif (this.gateway.recvSocket) this.gateway.recvSocket.close();\r\n\t\t\t\tthis.gateway.stop();\r\n\t\t\t}\r\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\r\n\t\t\tthis.clearTimeout(this.heartbeatTimeout);\r\n\t\t\t// clearTimeout(timeout2);\r\n\t\t\t// ...cxyc\r\n\t\t\tthis.clearInterval(this.queryDevicesInterval);\r\n\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tthis.log.error(`error while unloding module: ${e}`);\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\r\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\r\n\t\t/**\r\n\t\t * Is called if a subscribed state changes\r\n\t \t*/\r\n\t\tif (state) {\r\n\t\t\t// The state was changed\r\n\t\t\tif(state.ack == false){\r\n\t\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t\t}\r\n\t\t\tconst devicetype = this.devicemap.get(this.getMacForID(id))?.devtype;\r\n\t\t\tif (devicetype) {\r\n\t\t\t\tif (state.ack == false && id.search(\"position\") > 0) {\r\n\t\t\t\t\tawait this.gateway?.writeDevice(this.getMacForID(id), devicetype, { targetPosition: Number(state.val) })\r\n\t\t\t\t\t\t.then((value) => {this.updateFromReport(value)\t})\r\n\t\t\t\t\t\t.catch((err) => { this.log.error(\"got error while writing: \" + JSON.stringify(err)) });\r\n\t\t\t\t} else if (state.ack == false && id.search(\"angle\") > 0) {\r\n\t\t\t\t\tawait this.gateway?.writeDevice(this.getMacForID(id), devicetype, { targetAngle: Number(state.val) })\r\n\t\t\t\t\t\t.then((value) => {this.updateFromReport(value)})\r\n\t\t\t\t\t\t.catch((err) => { this.log.error(\"got error while writing: \" + JSON.stringify(err)) });\r\n\t\t\t\t} else if (state.ack == false && id.search(\"fullup\") > 0) {\r\n\t\t\t\t\tthis.setState(id,false,true)\r\n\t\t\t\t\tawait this.gateway?.writeDevice(this.getMacForID(id), devicetype, { operation: 1 })\r\n\t\t\t\t\t\t.then((value) => {this.updateFromReport(value)})\r\n\t\t\t\t\t\t.catch((err) => { this.log.error(\"got error while writing: \" + JSON.stringify(err)) });\r\n\t\t\t\t} else if (state.ack == false && id.search(\"fulldown\") > 0) {\r\n\t\t\t\t\tthis.setState(id,false,true)\r\n\t\t\t\t\tawait this.gateway?.writeDevice(this.getMacForID(id), devicetype, { operation: 0 })\r\n\t\t\t\t\t\t.then((value) => {this.updateFromReport(value)})\r\n\t\t\t\t\t\t.catch((err) => { this.log.error(\"got error while writing: \" + JSON.stringify(err)) });\r\n\t\t\t\t} else if (state.ack == false && id.search(\"stop\") > 0) {\r\n\t\t\t\t\tthis.setState(id,false,true)\r\n\t\t\t\t\tawait this.gateway?.writeDevice(this.getMacForID(id), devicetype, { operation: 2 })\r\n\t\t\t\t\t\t.then((value) => {this.updateFromReport(value) })\r\n\t\t\t\t\t\t.catch((err) => { this.log.error(\"got error while writing: \" + JSON.stringify(err)) });\r\n\t\t\t\t}\r\n\t\t\t\tif (state.ack == false) {\r\n\t\t\t\t\tthis.setState(id,false,true)\r\n\t\t\t\t\tawait this.gateway?.writeDevice(this.getMacForID(id), devicetype, { operation: 5 })\r\n\t\t\t\t\t\t.then((value) => { this.updateFromReport(value)})\r\n\t\t\t\t\t\t.catch((err) => { this.log.error(\"got error while writing: \" + JSON.stringify(err)) });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (state.ack == false && id.search(\"refreshDevs\") > 0){\r\n\t\t\t\tthis.setState(id,false,true)\r\n\t\t\t\tthis.log.info(\"Device refresh was triggered\")\r\n\t\t\t\tawait this.gateway?.readAllDevices()\r\n\t\t\t\t\t.catch((reason) => {this.log.error(\"Failed fetching list of MOTION Blinds: \" + JSON.stringify(reason))})\r\n\t\t\t\t\t.then((deviceData) => {this.processDeviceList(deviceData);});\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// The state was deleted\r\n\t\t\tthis.log.info(`state ${id} deleted`);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate getMacForID(id: string): string {\r\n\t\t/*extracts the mac from given id */\r\n\t\tconst splitted_id: string[] = id.split(\".\");\r\n\t\treturn splitted_id[splitted_id.length - 2];\r\n\t}\r\n\r\n\tprivate updateFromReport(report: Report | WriteDeviceAck): void {\r\n\t\t/* updates and creates devices from device Reports and  WriteDeviceAck Messegaes*/\r\n\t\tif(report.deviceType == DEVICE_TYPE_GATEWAY){\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.log.debug(\"Parsing Message: \" + JSON.stringify(report));\r\n\r\n\r\n\t\tthis.setObjectNotExists(report.mac, {\r\n\t\t\ttype: \"channel\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: report.mac,\r\n\t\t\t\trole: \"blind\"\r\n\t\t\t},\r\n\t\t\tnative: {\r\n\t\t\t\tmac: report.mac,\r\n\t\t\t\tdeviceType: report.deviceType\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst data = report.data;\r\n\t\tObject.keys(data).forEach((key, idx) => {\r\n\t\t\tlet value: any = Object.values(data)[idx];\r\n\r\n\t\t\tlet dp = report.mac + \".\" + key;\r\n\t\t\tlet name: string = key;\r\n\t\t\tlet unit = \"\";\r\n\t\t\tlet type: any = \"string\";\r\n\t\t\tlet write = false;\r\n\r\n\t\t\tswitch (key) {\r\n\t\t\t\tcase \"type\":\r\n\t\t\t\t\tname = \"Blind type\";\r\n\t\t\t\t\tvalue = BlindType[value].toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"operation\":\r\n\t\t\t\t\tname = \"Current operation\";\r\n\t\t\t\t\tvalue = Operation[value].toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"currentAngle\":\r\n\t\t\t\t\tdp = dp = report.mac + \".angle\";\r\n\t\t\t\t\tname = \"Shutter Angle\";\r\n\t\t\t\t\ttype = \"number\";\r\n\t\t\t\t\tunit = \"\uFFFD\"\r\n\t\t\t\t\twrite = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"voltageMode\":\r\n\t\t\t\t\tname = \"Motor type\"\r\n\t\t\t\t\tvalue = VoltageMode[value].toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"currentState\":\r\n\t\t\t\t\tname = \"Current state\";\r\n\t\t\t\t\tvalue = LimitsState[value].toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"wirelessMode\":\r\n\t\t\t\t\tname = \"Wireless type\";\r\n\t\t\t\t\tvalue = WirelessMode[value].toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSSI\":\r\n\t\t\t\t\ttype = \"number\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"currentPosition\":\r\n\t\t\t\t\tdp = dp = report.mac + \".position\";\r\n\t\t\t\t\tname = \"Position\";\r\n\t\t\t\t\ttype = \"number\";\r\n\t\t\t\t\twrite = true;\r\n\t\t\t\t\tunit = \"%\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"batteryLevel\":\r\n\t\t\t\t\tname = \"Battery Level\";\r\n\t\t\t\t\tunit = \"%\";\r\n\t\t\t\t\ttype = \"number\";\r\n\t\t\t\t\tvalue = Math.round(MotionGateway.BatteryInfo(value)[1] * 100);\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis.setObjectNotExists(dp, {\r\n\t\t\t\ttype: \"state\",\r\n\t\t\t\tcommon: {\r\n\t\t\t\t\tname: name,\r\n\t\t\t\t\trole: \"blind\",\r\n\t\t\t\t\ttype: type,\r\n\t\t\t\t\tread: true,\r\n\t\t\t\t\twrite: write,\r\n\t\t\t\t\tunit: unit\r\n\t\t\t\t},\r\n\t\t\t\tnative: {}\r\n\t\t\t},() => {this.setState(dp, value, true);}\r\n\t\t\t);\r\n\r\n\r\n\t\t});\r\n\t\tconst btns = [\"fullup\", \"fulldown\", \"stop\", \"device_query\"];\r\n\t\tfor (const btn of btns) {\r\n\t\t\tthis.setObjectNotExists(report.mac + \".\" + btn, {\r\n\t\t\t\ttype: \"state\",\r\n\t\t\t\tcommon: {\r\n\t\t\t\t\tname: btn,\r\n\t\t\t\t\trole: \"button\",\r\n\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\tread: false,\r\n\t\t\t\t\twrite: true,\r\n\t\t\t\t}, native: {}\r\n\t\t\t},() => {this.setState(report.mac + \".\" + btn, false, true)}\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t}\r\n\tprivate processHeartbeat(heartbeat: Heartbeat): void {\r\n\t\t/* processes received hearbeat messages and set info.connction to true after receiving */\r\n\t\tthis.log.debug(\"Heartbeat: \" + JSON.stringify(heartbeat));\r\n\t\tthis.log.debug(\"Resetting heartbeat timeout\")\r\n\t\tthis.clearTimeout(this.heartbeatTimeout)\r\n\t\tthis.heartbeatTimeout = this.setTimeout(()=>this.hbTimeoutExpired(),this.hbTimeout*1000);\r\n\t\tthis.missedHeartbeats = 0\r\n\t\tthis.setObjectNotExists(\"info.missingheartbeat\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"Missed Hearbeats\",\r\n\t\t\t\trole: \"counter\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: false,\r\n\t\t\t\twrite: true,\r\n\t\t\t}, native: {}\r\n\t\t},() => {this.setState(\"info.missingheartbeat\", this.missedHeartbeats, true)});\r\n\t\tthis.setState(\"info.connection\", {val:true, ack:true});\r\n\t\tthis.setObjectNotExists(heartbeat.mac, {\r\n\t\t\ttype: \"channel\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"Bridge \" + heartbeat.mac,\r\n\t\t\t\trole: \"blind\"\r\n\t\t\t},\r\n\t\t\tnative: {\r\n\t\t\t\tmac: heartbeat.mac\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tthis.setObjectNotExistsAsync(heartbeat.mac + \".devCount\",{\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"Device Count\",\r\n\t\t\t\trole: \"blind\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false\r\n\t\t\t},\r\n\t\t\tnative: {}\r\n\t\t},() => {this.setState(heartbeat.mac + \".devCount\", heartbeat.data.numberOfDevices, true);});\r\n\r\n\t\tthis.setObjectNotExistsAsync(heartbeat.mac + \".RSSI\",{\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"RSSI Count\",\r\n\t\t\t\trole: \"blind\",\r\n\t\t\t\ttype: \"number\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: false\r\n\t\t\t},\r\n\t\t\tnative: {}\r\n\t\t},() => {this.setState(heartbeat.mac + \".RSSI\", heartbeat.data.RSSI, true);});\r\n\t\tthis.setObjectNotExists(heartbeat.mac + \".refreshDevs\", {\r\n\t\t\ttype: \"state\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: \"Refresh Devices\",\r\n\t\t\t\trole: \"button\",\r\n\t\t\t\ttype: \"boolean\",\r\n\t\t\t\tread: false,\r\n\t\t\t\twrite: true,\r\n\t\t\t}, native: {}\r\n\t\t},() => {this.setState(heartbeat.mac + \".refreshDevs\", false, true)});\r\n\t\tthis.subscribeStates(\"*.refreshDevs\");\r\n\t}\r\n\r\n\tprivate processDeviceList(devList : void | ReadDeviceAck[]): void{\r\n\t\t/*processe device list from bridge and initiates refresh of all known devices */\r\n\t\tthis.log.info(\"processing device list\");\r\n\t\tthis.devices = devList\r\n\t\tif (this.devices) {\r\n\t\t\tthis.setState(\"info.connection\", {val:true, ack:true});\r\n\r\n\t\t\tthis.log.debug(\"Devices: \" + JSON.stringify(this.devices));\r\n\t\t\tfor (const dev of this.devices) {\r\n\t\t\t\tthis.devicemap.set(dev.mac, { devtype: dev.deviceType });\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tthis.refreshDevices()\r\n\t}\r\n\r\n\tprivate refreshDevices(): void{\r\n\t\t/*refrehes all known devices */\r\n\t\tthis.log.debug(\"refreshing devices\")\r\n\t\tfor (const [mac, data] of this.devicemap) {\r\n\r\n\t\t\tthis.gateway?.readDevice(mac, data.devtype)\r\n\t\t\t\t.then((value) => {\r\n\t\t\t\t\tconst reportdata = { msgType: \"Report\", data: value.data, mac: mac, deviceType: data.devtype } as Report;\r\n\t\t\t\t\tthis.updateFromReport(reportdata);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => { return err }\r\n\t\t\t\t)\r\n\t\t}\r\n\t}\r\n\r\n\tprivate hbTimeoutExpired(): void {\r\n\t\t/* handles heartbeat timeouts and sets info.connection to false after to many missed heatbeats*/\r\n\t\tthis.log.debug(\"heartbeat timed out\")\r\n\t\tthis.clearTimeout(this.heartbeatTimeout)\r\n\t\tthis.heartbeatTimeout = this.setTimeout(()=>this.hbTimeoutExpired(),this.hbTimeout*1000);\r\n\t\tthis.missedHeartbeats = this.missedHeartbeats + 1\r\n\t\tthis.setState(\"info.missingheartbeat\", this.missedHeartbeats, true);\r\n\r\n\r\n\t\tif(this.missedHeartbeats == this.maxMissedHeartbeats){\r\n\t\t\tthis.log.info(\"Missing hearbeat for more than \" +(this.missedHeartbeats * this.hbTimeout) +\" seconds, assuming conection to bridge lost\")\r\n\t\t}\r\n\t\tif (this.missedHeartbeats == 2){\r\n\t\t\tthis.log.info(\"heartbeat missing for more then \" + (this.hbTimeout * this.missedHeartbeats) + \" seconds, pleas check yor network connection\")\r\n\t\t}\r\n\t\tif (this.missedHeartbeats >= this.maxMissedHeartbeats){\r\n\t\t\tthis.setState(\"info.connection\", {val:false, ack:true});\r\n\t\t}\r\n\r\n\r\n\r\n\t}\r\n}\r\n\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Motionblinds(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new Motionblinds())();\r\n}\r\n\r\n"],
  "mappings": "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",
  "names": []
}
