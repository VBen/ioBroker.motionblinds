{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\r\n * Created with @iobroker/create-adapter v1.34.0\r\n */\r\n\r\n// The adapter-core module gives you access to the core ioBroker functions\r\n// you need to create an adapter\r\nimport * as utils from \"@iobroker/adapter-core\";\r\nimport { MotionGateway, Report, BlindType, ReadDeviceAck, DeviceType, Operation, VoltageMode, LimitsState, WirelessMode } from \"motionblinds\";\r\n\r\n\r\n// Load your modules here, e.g.:\r\n// import * as fs from \"fs\";\r\ntype DeviceData = {\r\n\tdevtype: DeviceType\r\n}\r\n\r\nclass Motionblinds extends utils.Adapter {\r\n\r\n\tprivate gateway?: MotionGateway;\r\n\tprivate devices: void | ReadDeviceAck[] = [];\r\n\tprivate devicemap = new Map<string, DeviceData>();\r\n\r\n\r\n\tpublic constructor(options: Partial<utils.AdapterOptions> = {}) {\r\n\t\tsuper({\r\n\t\t\t...options,\r\n\t\t\tname: \"motionblinds\",\r\n\t\t});\r\n\t\tthis.on(\"ready\", this.onReady.bind(this));\r\n\t\tthis.on(\"stateChange\", this.onStateChange.bind(this));\r\n\t\t// this.on(\"objectChange\", this.onObjectChange.bind(this));\r\n\t\t// this.on(\"message\", this.onMessage.bind(this));\r\n\t\tthis.on(\"unload\", this.onUnload.bind(this));\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when databases are connected and adapter received configuration.\r\n\t */\r\n\tprivate async onReady(): Promise<void> {\r\n\t\t// Initialize your adapter here\r\n\t\t// The adapters config (in the instance object everything under the attribute \"native\") is accessible via\r\n\t\t// this.config:\r\n\t\tthis.log.info(\"config token: \" + this.config.token);\r\n\r\n\t\tif(this.config.timeout<3 || !this.config.timeout){\r\n\t\t\tthis.config.timeout = 0\r\n\t\t\tthis.log.error(\"Timout was lower than 3sec or undefined, value was resetted to 3sec, please correct your adapter configuration\")\r\n\t\t}\r\n\r\n\t\tthis.log.info(\"using timeout:\" + this.config.timeout);\r\n\r\n\t\t// Reset the connection indicator during startup\r\n\t\tthis.setState(\"info.connection\", false, true);\r\n\t\tthis.gateway = new MotionGateway({ key: this.config.token, timeoutSec: this.config.timeout });\r\n\t\tthis.gateway.start();\r\n\r\n\t\tthis.gateway.on(\"report\", (report) => {\r\n\t\t\tthis.updateFromReport(report);\r\n\t\t})\r\n\t\tthis.gateway.on(\"error\", (err) => {\r\n\t\t\tthis.log.error(\"Error: \" + JSON.stringify(err));\r\n\t\t})\r\n\t\tthis.gateway.on(\"heartbeat\", (heartbeat) => {\r\n\t\t\tthis.log.debug(\"Heartbeat: \" + JSON.stringify(heartbeat));\r\n\t\t})\r\n\r\n\t\t// Reset the connection indicator during startup\r\n\t\tthis.setState(\"info.connection\", false, true);\r\n\t\tthis.log.info(\"Fetching device list\");\r\n\t\tthis.devices = await this.gateway.readAllDevices()\r\n\t\t\t.catch((reason) => this.log.error(\"Failed fetching list of MOTION Blinds: \" + JSON.stringify(reason)));\r\n\t\tif (this.devices) {\r\n\t\t\tthis.setState(\"info.connection\", true, true);\r\n\t\t\tthis.log.debug(\"Devices: \" + JSON.stringify(this.devices));\r\n\t\t\tfor (const dev of this.devices) {\r\n\t\t\t\tthis.devicemap.set(dev.mac, { devtype: dev.deviceType });\r\n\t\t\t}\r\n\r\n\t\t}\r\n\t\tfor (const [mac, data] of this.devicemap) {\r\n\r\n\t\t\tawait this.gateway.readDevice(mac, data.devtype)\r\n\t\t\t\t.then((value) => {\r\n\t\t\t\t\tconst reportdata = { msgType: \"Report\", data: value.data, mac: mac, deviceType: data.devtype } as Report;\r\n\t\t\t\t\tthis.updateFromReport(reportdata);\r\n\t\t\t\t})\r\n\t\t\t\t.catch((err) => { return err }\r\n\t\t\t\t)\r\n\t\t}\r\n\t\tthis.log.debug(JSON.stringify(this.devices));\r\n\r\n\t\tthis.subscribeStates(\"*.position\");\r\n\t\tthis.subscribeStates(\"*.fullup\");\r\n\t\tthis.subscribeStates(\"*.fulldown\");\r\n\t\tthis.subscribeStates(\"*.stop\");\r\n\t\tthis.subscribeStates(\"*.device_query\");\r\n\t\tthis.subscribeStates(\"*.angle\");\r\n\r\n\t\t/*\r\n\t\tFor every state in the system there has to be alDeviceType\r\n\t\t\t\ttype: \"boolean\",\r\n\t\t\t\trole: \"indicator\",\r\n\t\t\t\tread: true,\r\n\t\t\t\twrite: true,\r\n\t\t\t},\r\n\t\t\tnative: {},\r\n\t\t});*/\r\n\t\t/*const states = this.getStatesAsync(\"*.position\");\r\n\t\tthis.log.silly(\"states:\" + JSON.stringify(states));*/\r\n\t\t// In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\r\n\t\t// this.subscribeStates(\"testVariable\");\r\n\t\t// You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\r\n\t\t// this.subscribeStates(\"lights.*\");\r\n\t\t// Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\r\n\t\t// this.subscribeStates(\"*\");\r\n\r\n\t\t/*\r\n\t\t\tsetState examples\r\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\r\n\t\t*/\r\n\t\t// the variable testVariable is set to true as command (ack=false)\r\n\t\t/*await this.setStateAsync(\"testVariable\", true);\r\n\r\n\t\t// same thing, but the vaimport  * as os from \"os\";p user admin group admin: \" + result);*/\r\n\t}\r\n\r\n\t/**\r\n\t * Is called when adapter shuts down - callback has to be called under any circumstances!\r\n\t */\r\n\tprivate onUnload(callback: () => void): void {\r\n\t\tthis.log.info(\"Shutting down adapter\");\r\n\t\ttry {\r\n\t\t\tif (this.gateway) {\r\n\t\t\t\tif (this.gateway.sendSocket) this.gateway.sendSocket.close();\r\n\t\t\t\tif (this.gateway.recvSocket) this.gateway.recvSocket.close();\r\n\t\t\t\tthis.gateway.stop();\r\n\t\t\t}\r\n\t\t\t// Here you must clear all timeouts or intervals that may still be active\r\n\t\t\t// clearTimeout(timeout1);\r\n\t\t\t// clearTimeout(timeout2);\r\n\t\t\t// ...cxyc\r\n\t\t\t// clearInterval(interval1);\r\n\r\n\t\t\tcallback();\r\n\t\t} catch (e) {\r\n\t\t\tcallback();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t// If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\r\n\t// You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\r\n\t// /**\r\n\t//  * Is called if a subscribed object changes\r\n\t//  */\r\n\t// private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\r\n\t// \tif (obj) {\r\n\t// \t\t// The object was changed\r\n\t// \t\tthis.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\r\n\t// \t} else {\r\n\t// \t\t// The object was deleted\r\n\t// \t\tthis.log.info(`object ${id} deleted`);\r\n\t// \t}\r\n\t// }\r\n\r\n\t/**\r\n\t * Is called if a subscribed state changes\r\n\t */\r\n\tprivate async onStateChange(id: string, state: ioBroker.State | null | undefined): Promise<void> {\r\n\r\n\t\tif (state) {\r\n\t\t\t// The state was changed\r\n\t\t\tthis.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\r\n\t\t\tlet doUpdate = false;\r\n\t\t\tconst devicetype = this.devicemap.get(this.getMacForID(id))?.devtype;\r\n\t\t\tif (devicetype) {\r\n\t\t\t\tif (state.ack == false && id.search(\"position\") > 0) {\r\n\t\t\t\t\tawait this.gateway?.writeDevice(this.getMacForID(id), devicetype, { targetPosition: Number(state.val) })\r\n\t\t\t\t\t\t.then((value) => { this.log.info(\"got ack: \" + JSON.stringify(value)) })\r\n\t\t\t\t\t\t.catch((err) => { this.log.error(\"got error while writing: \" + JSON.stringify(err)) });\r\n\t\t\t\t\tdoUpdate = true;\r\n\r\n\t\t\t\t} else if (state.ack == false && id.search(\"angle\") > 0) {\r\n\t\t\t\t\tawait this.gateway?.writeDevice(this.getMacForID(id), devicetype, { targetAngle: Number(state.val) })\r\n\t\t\t\t\t\t.then((value) => { this.log.info(\"got ack: \" + JSON.stringify(value)) })\r\n\t\t\t\t\t\t.catch((err) => { this.log.error(\"got error while writing: \" + JSON.stringify(err)) });\r\n\t\t\t\t\tdoUpdate = true;\r\n\r\n\t\t\t\t} else if (state.ack == false && id.search(\"fullup\") > 0) {\r\n\t\t\t\t\tawait this.gateway?.writeDevice(this.getMacForID(id), devicetype, { operation: 1 })\r\n\t\t\t\t\t\t.then((value) => { this.log.info(\"got ack: \" + JSON.stringify(value)) })\r\n\t\t\t\t\t\t.catch((err) => { this.log.error(\"got error while writing: \" + JSON.stringify(err)) });\r\n\r\n\t\t\t\t} else if (state.ack == false && id.search(\"fulldown\") > 0) {\r\n\t\t\t\t\tawait this.gateway?.writeDevice(this.getMacForID(id), devicetype, { operation: 0 })\r\n\t\t\t\t\t\t.then((value) => { this.log.info(\"got ack: \" + JSON.stringify(value)) })\r\n\t\t\t\t\t\t.catch((err) => { this.log.error(\"got error while writing: \" + JSON.stringify(err)) });\r\n\t\t\t\t} else if (state.ack == false && id.search(\"stop\") > 0) {\r\n\t\t\t\t\tawait this.gateway?.writeDevice(this.getMacForID(id), devicetype, { operation: 2 })\r\n\t\t\t\t\t\t.then((value) => { this.log.info(\"got ack: \" + JSON.stringify(value)) })\r\n\t\t\t\t\t\t.catch((err) => { this.log.error(\"got error while writing: \" + JSON.stringify(err)) });\r\n\t\t\t\t}\r\n\t\t\t\tif (state.ack == false && doUpdate) {\r\n\t\t\t\t\tawait this.gateway?.writeDevice(this.getMacForID(id), devicetype, { operation: 5 })\r\n\t\t\t\t\t\t.then((value) => { this.log.info(\"got ack: \" + JSON.stringify(value)) })\r\n\t\t\t\t\t\t.catch((err) => { this.log.error(\"got error while writing: \" + JSON.stringify(err)) });\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\t// The state was deleted\r\n\t\t\tthis.log.info(`state ${id} deleted`);\r\n\t\t}\r\n\t}\r\n\r\n\t// If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\r\n\t// /**\r\n\t//  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\r\n\t//  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\r\n\t//  */\r\n\t// private onMessage(obj: ioBroker.Message): void {\r\n\t// \tif (typeof obj === \"object\" && obj.message) {\r\n\t// \t\tif (obj.command === \"send\") {\r\n\t// \t\t\t// e.g. send email or pushover or whatever\r\n\t// \t\t\tthis.log.info(\"send command\");\r\n\r\n\t// \t\t\t// Send response in callback if required\r\n\t// \t\t\tif (obj.callback) this.sendTo(obj.from, obj.command, \"Message received\", obj.callback);\r\n\t// \t\t}\r\n\t// \t}\r\n\t// }\r\n\tprivate getMacForID(id: string): string {\r\n\t\tconst splitted_id: string[] = id.split(\".\");\r\n\t\treturn splitted_id[splitted_id.length - 2];\r\n\t}\r\n\r\n\tprivate updateFromReport(report: Report): void {\r\n\t\tthis.log.debug(\"Report: \" + JSON.stringify(report));\r\n\t\tthis.setObjectNotExists(report.mac, {\r\n\t\t\ttype: \"channel\",\r\n\t\t\tcommon: {\r\n\t\t\t\tname: report.mac,\r\n\t\t\t\trole: \"blind\"\r\n\t\t\t},\r\n\t\t\tnative: {\r\n\t\t\t\tmac: report.mac,\r\n\t\t\t\tdeviceType: report.deviceType\r\n\t\t\t}\r\n\t\t});\r\n\t\tconst data = report.data;\r\n\t\tObject.keys(data).forEach((key, idx) => {\r\n\t\t\tlet value: any = Object.values(data)[idx];\r\n\r\n\t\t\tlet dp = report.mac + \".\" + key;\r\n\t\t\tlet name: string = key;\r\n\t\t\tlet unit = \"\";\r\n\t\t\tlet type: any = \"string\";\r\n\t\t\tlet write = false;\r\n\r\n\t\t\tswitch (key) {\r\n\t\t\t\tcase \"type\":\r\n\t\t\t\t\tname = \"Blind type\";\r\n\t\t\t\t\tvalue = BlindType[value].toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"operation\":\r\n\t\t\t\t\tname = \"Current operation\";\r\n\t\t\t\t\tvalue = Operation[value].toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"currentAngle\":\r\n\t\t\t\t\tdp = dp = report.mac + \".angle\";\r\n\t\t\t\t\tname = \"Shutter Angle\";\r\n\t\t\t\t\ttype = \"number\";\r\n\t\t\t\t\tunit = \"\u00B0\"\r\n\t\t\t\t\twrite = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"voltageMode\":\r\n\t\t\t\t\tname = \"Motor type\"\r\n\t\t\t\t\tvalue = VoltageMode[value].toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"currentState\":\r\n\t\t\t\t\tname = \"Current state\";\r\n\t\t\t\t\tvalue = LimitsState[value].toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"wirelessMode\":\r\n\t\t\t\t\tname = \"Wireless type\";\r\n\t\t\t\t\tvalue = WirelessMode[value].toString();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"RSSI\":\r\n\t\t\t\t\ttype = \"number\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"currentPosition\":\r\n\t\t\t\t\tdp = dp = report.mac + \".position\";\r\n\t\t\t\t\tname = \"Position\";\r\n\t\t\t\t\ttype = \"number\";\r\n\t\t\t\t\twrite = true;\r\n\t\t\t\t\tunit = \"%\";\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"batteryLevel\":\r\n\t\t\t\t\tname = \"Battery Level\";\r\n\t\t\t\t\tunit = \"%\";\r\n\t\t\t\t\ttype = \"number\"\r\n\t\t\t\t\tvalue = value / 10;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t}\r\n\r\n\r\n\t\t\tthis.setObjectNotExists(dp, {\r\n\t\t\t\ttype: \"state\",\r\n\t\t\t\tcommon: {\r\n\t\t\t\t\tname: name,\r\n\t\t\t\t\trole: \"blind\",\r\n\t\t\t\t\ttype: type,\r\n\t\t\t\t\tread: true,\r\n\t\t\t\t\twrite: write,\r\n\t\t\t\t\tunit: unit\r\n\t\t\t\t},\r\n\t\t\t\tnative: {}\r\n\t\t\t},() => {this.setState(dp, value, true);}\r\n\t\t\t);\r\n\r\n\r\n\t\t});\r\n\t\tconst btns = [\"fullup\", \"fulldown\", \"stop\", \"device_query\"];\r\n\t\tfor (const btn of btns) {\r\n\t\t\tthis.setObjectNotExists(report.mac + \".\" + btn, {\r\n\t\t\t\ttype: \"state\",\r\n\t\t\t\tcommon: {\r\n\t\t\t\t\tname: btn,\r\n\t\t\t\t\trole: \"button\",\r\n\t\t\t\t\ttype: \"boolean\",\r\n\t\t\t\t\tread: false,\r\n\t\t\t\t\twrite: true,\r\n\t\t\t\t}, native: {}\r\n\t\t\t});\r\n\r\n\t\t}\r\n\t}\r\n}\r\nif (require.main !== module) {\r\n\t// Export the constructor in compact mode\r\n\tmodule.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Motionblinds(options);\r\n} else {\r\n\t// otherwise start the instance directly\r\n\t(() => new Motionblinds())();\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
